# Production Docker Compose Configuration
version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: taskboard-postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-taskboard}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - taskboard-network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    # Only expose if needed for external access
    # ports:
    #   - "5432:5432"

  redis:
    image: redis:7-alpine
    container_name: taskboard-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - taskboard-network
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    # Only expose if needed for external access
    # ports:
    #   - "6379:6379"

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: taskboard-backend
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME:-taskboard}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRY: ${JWT_EXPIRY:-24h}
      PORT: 8080
      HOST: 0.0.0.0
      CORS_ORIGIN: ${CORS_ORIGIN:-*}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - taskboard-network
    restart: always
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    # Expose only if not using reverse proxy
    ports:
      - "${BACKEND_PORT:-8080}:8080"

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: taskboard-frontend
    environment:
      REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:8080/api/v1}
    depends_on:
      - backend
    networks:
      - taskboard-network
    restart: always
    ports:
      - "${FRONTEND_PORT:-80}:80"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 3s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  taskboard-network:
    driver: bridge

